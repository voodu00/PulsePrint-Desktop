name: CI

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

env:
  CARGO_TERM_COLOR: always

jobs:
  # Build jobs that produce reusable artifacts
  build-frontend:
    name: Build Frontend
    runs-on: ubuntu-latest
    outputs:
      cache-key: ${{ steps.cache-key.outputs.key }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'yarn'
          cache-dependency-path: frontend-react/yarn.lock

      - name: Generate cache key
        id: cache-key
        run: |
          echo "key=frontend-${{ hashFiles('frontend-react/package.json', 'frontend-react/yarn.lock', 'frontend-react/src/**/*') }}" >> $GITHUB_OUTPUT

      - name: Install dependencies
        run: |
          cd frontend-react
          yarn install --frozen-lockfile

      - name: Build frontend
        run: |
          cd frontend-react
          yarn build

      - name: Upload frontend build
        uses: actions/upload-artifact@v4
        with:
          name: frontend-build
          path: frontend-react/build/
          retention-days: 1

      - name: Upload node_modules
        uses: actions/upload-artifact@v4
        with:
          name: frontend-node-modules
          path: frontend-react/node_modules/
          retention-days: 1

  build-rust:
    name: Build Rust (Release)
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y libwebkit2gtk-4.1-dev \
            build-essential \
            curl \
            wget \
            file \
            libxdo-dev \
            libssl-dev \
            libayatana-appindicator3-dev \
            librsvg2-dev

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Cache Rust dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            src-tauri/target/
          key: ${{ runner.os }}-cargo-release-${{ hashFiles('**/Cargo.lock') }}

      - name: Build Rust (release)
        run: |
          cd src-tauri
          cargo build --release

      - name: Upload Rust build
        uses: actions/upload-artifact@v4
        with:
          name: rust-build-release
          path: src-tauri/target/release/
          retention-days: 1

  # Quality check jobs that reuse artifacts
  frontend-checks:
    name: Frontend Code Quality
    runs-on: ubuntu-latest
    needs: build-frontend

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'yarn'
          cache-dependency-path: frontend-react/yarn.lock

      - name: Download node_modules
        uses: actions/download-artifact@v4
        with:
          name: frontend-node-modules
          path: frontend-react/node_modules/

      - name: Run ESLint
        run: |
          cd frontend-react
          yarn eslint src --ext .ts,.tsx --max-warnings 50

      - name: Run Prettier check
        run: |
          cd frontend-react
          yarn prettier --check "src/**/*.{ts,tsx,js,jsx,json,css,md}"

      - name: TypeScript compilation check
        run: |
          cd frontend-react
          yarn tsc --noEmit

      - name: Run tests
        run: |
          cd frontend-react
          yarn test --watchAll=false --coverage

      - name: Upload coverage reports
        uses: codecov/codecov-action@v4
        with:
          file: ./frontend-react/coverage/lcov.info
          flags: frontend
          name: frontend-coverage

  rust-checks:
    name: Rust Code Quality
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y libwebkit2gtk-4.1-dev \
            build-essential \
            curl \
            wget \
            file \
            libxdo-dev \
            libssl-dev \
            libayatana-appindicator3-dev \
            librsvg2-dev

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt, clippy

      - name: Cache Rust dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            src-tauri/target/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      - name: Run Clippy
        run: |
          cd src-tauri
          cargo clippy --all-targets --all-features

      - name: Check formatting
        run: |
          cd src-tauri
          cargo fmt --all -- --check

      - name: Run tests
        run: |
          cd src-tauri
          cargo test

  # Cross-platform builds that reuse frontend build
  cross-platform-build:
    name: Cross-Platform Build Test
    needs: build-frontend
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            name: Linux
          - os: windows-latest
            name: Windows
          - os: macos-latest
            name: macOS
    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'yarn'
          cache-dependency-path: frontend-react/yarn.lock

      - name: Download frontend build
        uses: actions/download-artifact@v4
        with:
          name: frontend-build
          path: frontend-react/build/

      - name: Install Linux dependencies
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y libwebkit2gtk-4.1-dev \
            build-essential \
            curl \
            wget \
            file \
            libxdo-dev \
            libssl-dev \
            libayatana-appindicator3-dev \
            librsvg2-dev

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Cache Rust dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            src-tauri/target/
          key: ${{ matrix.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      - name: Install Tauri CLI
        run: cargo install tauri-cli --locked

      - name: Build application
        run: |
          cd src-tauri
          cargo tauri build --no-bundle --config '{"build":{"beforeBuildCommand":""}}'
