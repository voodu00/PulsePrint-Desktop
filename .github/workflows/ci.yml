name: CI

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

env:
  CARGO_TERM_COLOR: always

jobs:
  frontend-checks:
    name: Frontend Code Quality
    runs-on: self-hosted

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup self-hosted runner
        uses: ./.github/actions/setup-self-hosted

      - name: Install dependencies
        run: |
          cd frontend-react
          yarn install --frozen-lockfile

      - name: Run ESLint
        run: |
          cd frontend-react
          yarn eslint src --ext .ts,.tsx --max-warnings 50

      - name: Run Prettier check
        run: |
          cd frontend-react
          yarn prettier --check "src/**/*.{ts,tsx,js,jsx,json,css,md}"

      - name: TypeScript compilation check
        run: |
          cd frontend-react
          yarn tsc --noEmit

      - name: Run tests
        run: |
          cd frontend-react
          yarn test --watchAll=false --coverage

      - name: Upload coverage reports
        uses: codecov/codecov-action@v4
        with:
          file: ./frontend-react/coverage/lcov.info
          flags: frontend
          name: frontend-coverage

  rust-checks:
    name: Rust Code Quality
    runs-on: self-hosted

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup self-hosted runner
        uses: ./.github/actions/setup-self-hosted

      - name: Run Clippy
        run: |
          cd src-tauri
          cargo clippy --all-targets --all-features

      - name: Check formatting
        run: |
          cd src-tauri
          cargo fmt --all -- --check

      - name: Run tests
        run: |
          cd src-tauri
          cargo test

      - name: Build verification
        run: |
          cd src-tauri
          # Use release build to reduce memory usage and improve performance
          cargo build --release

  cross-platform-build:
    name: Cross-Platform Build Test
    strategy:
      matrix:
        include:
          - os: self-hosted
            name: Linux (Self-Hosted)
          # Commented out for self-hosted runner setup - uncomment when open sourcing
          # - os: windows-latest
          #   name: Windows
          # - os: macos-latest
          #   name: macOS
    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup self-hosted runner (Linux only)
        if: matrix.os == 'self-hosted'
        uses: ./.github/actions/setup-self-hosted

      - name: Setup Node.js (non-Linux)
        if: matrix.os != 'self-hosted'
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'yarn'
          cache-dependency-path: frontend-react/yarn.lock

      - name: Install Linux dependencies (non-self-hosted)
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y libwebkit2gtk-4.1-dev \
            build-essential \
            curl \
            wget \
            file \
            libxdo-dev \
            libssl-dev \
            libayatana-appindicator3-dev \
            librsvg2-dev

      - name: Setup Rust (non-Linux)
        if: matrix.os != 'self-hosted'
        uses: dtolnay/rust-toolchain@stable

      - name: Install frontend dependencies
        shell: bash
        run: |
          cd frontend-react
          # Retry yarn install up to 3 times to handle temporary registry failures
          for i in 1 2 3; do
            if yarn install --frozen-lockfile; then
              break
            elif [ $i -eq 3 ]; then
              echo "Failed to install dependencies after 3 attempts"
              exit 1
            else
              echo "Attempt $i failed, retrying in 10 seconds..."
              sleep 10
            fi
          done

      - name: Build frontend
        run: |
          cd frontend-react
          yarn build

      - name: Install Tauri CLI
        run: cargo install tauri-cli --locked

      - name: Build application
        run: |
          cd src-tauri
          cargo tauri build --no-bundle --config '{"build":{"beforeBuildCommand":""}}'
