name: CI

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

permissions:
  contents: read
  actions: read
  checks: write
  pull-requests: write

env:
  CARGO_TERM_COLOR: always

jobs:
  frontend:
    name: Frontend
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'yarn'
          cache-dependency-path: frontend-react/yarn.lock

      - name: Install dependencies
        run: |
          cd frontend-react
          yarn install --frozen-lockfile

      - name: Code Quality Checks
        run: |
          cd frontend-react
          # Run all checks in parallel
          yarn eslint src --ext .ts,.tsx --max-warnings 50 &
          yarn prettier --check "src/**/*.{ts,tsx,js,jsx,json,css,md}" &
          yarn tsc --noEmit &
          wait

      - name: Test with coverage
        run: |
          cd frontend-react
          yarn test --watchAll=false --coverage

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v5
        with:
          token: ${{ secrets.CODECOV_TOKEN }}

      # - name: SonarCloud Scan
      #   uses: SonarSource/sonarcloud-github-action@v2.3.0
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      #     SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

      - name: Build
        run: |
          cd frontend-react
          yarn build

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: frontend-build
          path: frontend-react/build/
          retention-days: 1

  backend:
    name: Backend
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Install minimal system dependencies
        run: |
          # Install minimal dependencies required for cargo check
          sudo apt-get update
          sudo apt-get install -y \
            pkg-config \
            libglib2.0-dev \
            libgtk-3-dev \
            libwebkit2gtk-4.1-dev

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt, clippy
          targets: x86_64-unknown-linux-gnu

      - name: Cache Rust dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            src-tauri/target/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      - name: Code Quality Checks
        run: |
          cd src-tauri
          # Run format and lint checks in parallel
          cargo fmt --all -- --check &
          cargo clippy --all-targets --all-features -- -D warnings &
          wait

      - name: Test
        run: |
          cd src-tauri
          cargo test --verbose --lib --bins
          # Skip integration tests that require frontend build

      - name: Create frontend build directory
        run: |
          # Tauri expects frontend build to exist
          mkdir -p frontend-react/build
          echo '<!DOCTYPE html><html><body>Placeholder</body></html>' > frontend-react/build/index.html

      - name: Check build
        run: |
          cd src-tauri
          # Just check the build compiles
          cargo check

  integration:
    name: Integration & E2E Tests
    runs-on: ubuntu-latest
    needs: [frontend, backend]

    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Install system dependencies
        run: |
          # Install all required dependencies for Tauri and Playwright
          echo "Installing system dependencies..."
          sudo apt-get update
          sudo apt-get install -y \
            libwebkit2gtk-4.1-dev \
            libgtk-3-dev \
            libayatana-appindicator3-dev \
            libxdo-dev \
            libssl-dev \
            librsvg2-dev \
            build-essential \
            curl \
            wget \
            file \
            patchelf \
            pkg-config \
            libglib2.0-dev \
            libcairo2-dev \
            libpango1.0-dev \
            libatk1.0-dev \
            libgdk-pixbuf-2.0-dev \
            libsoup-3.0-dev \
            libjavascriptcoregtk-4.1-dev

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'yarn'
          cache-dependency-path: frontend-react/yarn.lock

      - name: Download frontend build
        uses: actions/download-artifact@v4
        with:
          name: frontend-build
          path: frontend-react/build/

      - name: Install Playwright
        run: |
          cd frontend-react
          # Install minimal dependencies needed for Playwright
          yarn install --frozen-lockfile
          # Install Playwright browsers
          yarn playwright install --with-deps

      - name: Serve frontend build and run E2E tests
        run: |
          cd frontend-react
          # Use a simple HTTP server to serve the production build
          npx serve -s build -l 3000 &
          SERVER_PID=$!
          
          # Wait for server to start
          echo "Waiting for server to start..."
          for i in {1..30}; do
            if curl -s http://localhost:3000 > /dev/null; then
              echo "Server is ready!"
              break
            fi
            sleep 1
          done
          
          # Run E2E tests
          yarn test:e2e
          
          # Cleanup
          kill $SERVER_PID || true

      - name: Upload Playwright report
        uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: playwright-report
          path: frontend-react/playwright-report/
          retention-days: 30

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Cache Rust dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            src-tauri/target/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      - name: Run Rust integration tests
        run: |
          cd src-tauri
          cargo test --test integration_tests

      - name: Run Rust E2E integration tests
        run: |
          cd src-tauri
          # Run the e2e integration tests that require frontend build
          cargo test --test e2e_integration --verbose
